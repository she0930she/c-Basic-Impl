Object type is the base type for all other types in c#

reasons not to use Object as input parameter type:
1. Loose type safety
2.unwanted boxing

Generics: allows us to define the classes or methods but defer the specification
string is reference type

limit T
struct or enum to replace limit T

use case for Generics:
Interface
1. Interface is a collection of methods which are by default public and abstract, and will be implemented by the derived classes
2. One class can implement multiple interfaces
3. Interface cannot ne instantiated
4. interface is helpful in writing loosely coupled code

**** *****
Abstract class vs Interface
1. Abstract class provides a base class to its subclass - use it when we have clear class hierarchy
    Interface defines common behaviors that can be implemented by any class
2. One class only inherit from one abstract class/concrete class but one class can implement multiple interfaces

IRepository: common CRUD
ICustomerRepository: getCustomerByEmail, getCustomerByCity
CustomerRepository: IRe

3. Methods in abstract class can be abstract methods or non-abstract methods 
    but for methods in interface are by default public and abstract


***  ****



SOLID Principles
S: single responsibility principle
    a class should have only one responsibility, should have only one reason to change

Frontend: web pages to interact with users
Backend:

1. Controller/ web layer: handle request/response, validation, security check
2. Service layer/ Business layer: business logic
3. Data layer/ Repository layer: talk to database
4. Other classes
    -- utility class: convert data types
    -- helper class: conclude functionalities like factory
    -- Entity class: ORM Object Relational Mapping
    -- constants

O: Open/Close Principle
    software entities(classes, modules, functions) should be open for extension but close for modification
    use extension methods or inheritance
    
L: Liskov Substitution Principle: derived class should be substitutable for their base types
    maintain the behavior of base class
    proj2
    instead of modifying the base class, we should extend the base class 
    
I: interface Segregation principleL 
    clients should not be forced to depend on the interfaces they do not use

CustomerRepo, ProductRepo
Common: GetById, GetAll, Create, Update, Delete
diff: GetByCategory, GetByEmail

Single Interface IRepository: GetById, GetAll, Create, Update, Delete, GetByCategory, GetByEmail
CustomerRepo: IRepo

Another way:
Irepository: GetById, GetAll, Create, Update, Delete
ICustomerRepository: GetByEmail
IProductRepository: GetByEmail

CustomerRepo: IRepository, ICustomerRepository
ProductRepo: IRepository, IProductRepository

D: Dependency Inversion Principle
    depend on abstractions instead of concrete classes, helps to achieve loosely coupled
    going to implement it with the help of dependency injection
    

Collections: a list of objects
    non-generics collections: take objects. One collection can contain different types of elements
        ArrayList
        
        
    generic collections: specify the type
        dictionary
    
    
Advantages of Generic collection:
1. Type safety
2. better performance
3. flexibility
4. Maintainability
    no need casting, boxing

    
    